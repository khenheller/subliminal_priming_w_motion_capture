% Runs trials according to a trial list generated by getTrials.
% trials - a list of trials generated by "getTrials", each includes the stimuli and their timing.
% include_prime - present prime stimuli?
% is_reach - 1=sub responds with reaching , 0=responds with keybaord.
% p - all experiment's parameters.
function [p] = runTrials(trials, include_prime, is_reach, p)

    % Assigned to prime ans on block w/o prime.
    default_prime_ans = struct('answer_left',NaN, 'traj_to',NaN(p.REACH_MAX_RT_LIMIT, 3), 'timecourse_to',NaN(p.REACH_MAX_RT_LIMIT,1),...
        'traj_from',NaN(p.REACH_MAX_RT_LIMIT, 3), 'timecourse_from',NaN(p.REACH_MAX_RT_LIMIT,1), 'categor_time',NaN);
    
    % Shorter durations to avoide missing the screen flip.
    fix_duration = p.FIX_DURATION - p.REF_RATE_SEC * 3 / 4;
    mask1_duration = p.MASK1_DURATION - p.REF_RATE_SEC * 3 / 4;
    mask2_duration = p.MASK2_DURATION - p.REF_RATE_SEC * 3 / 4;
    prime_duration = p.PRIME_DURATION - p.REF_RATE_SEC * 3 / 4;
    mask3_duration = p.MASK3_DURATION - p.REF_RATE_SEC * 3 / 4;
    
    try        
        % Iterates over trials.
        while ~isempty(trials)
            times = nan(9,1); % times of each event, taken from system's clock.
            
            % block change
            if trials.iTrial(1) ~= 1 
                if mod(trials.iTrial(1), p.BLOCK_SIZE) == 1
                    showTexture(p.BLOCK_END_SCREEN, p);
                    KbWait([], 3);
                end               
            end
            
            % Make masks slides.
            mask1 = getTextureFromHD(p.MASKS(trials.mask1(1)), p);
            mask2 = getTextureFromHD(p.MASKS(trials.mask2(1)), p);
            mask3 = getTextureFromHD(p.MASKS(trials.mask3(1)), p);
            
            % Set prime font now to save run times.
            Screen('TextFont',p.w, p.HAND_FONT_TYPE);
            Screen('TextSize', p.w, p.HAND_FONT_SIZE);
            
            % Fixation
            times(1) = showFixation(is_reach, p);
            
            % Mask 1
            times(2) = showMask(mask1, times(1) + fix_duration, p);
            
            % Mask 2
            times(3) = showMask(mask2, times(2) + mask1_duration, p);
            
            % Prime
            if include_prime
                times(4) = showWord(trials(1,:), 'prime', times(3) + mask2_duration, p);
                mask_3_disp_time = times(4) + prime_duration;
            else
                mask_3_disp_time = times(3) + mask2_duration;
            end
            
            % Mask 3
            times(5) = showMask(mask3, mask_3_disp_time, p);
            
            % Target
            Screen('TextFont',p.w, p.FONT_TYPE); % Set target font.
            Screen('TextSize', p.w, p.FONT_SIZE);
            times(6) = showWord(trials(1,:), 'target', times(5) + mask3_duration, p);
            
            % Target categorization.
            if is_reach
                target_ans = getReachAns('categor', p);
            else
                target_ans = getKeyboardAns('categor', times(6), p);
            end
            
            % Check answer.
            trials.target_ans_left(1) = target_ans.answer_left;
            trials(1,:) = checkAns(trials(1,:), 'categor');
            sub_answered_intime = ~(target_ans.late_res | target_ans.slow_mvmnt | target_ans.early_res);
            if ~trials.target_correct(1) && sub_answered_intime
                showTexture(p.WRONG_ANS_SCREEN, p);
                WaitSecs(p.MSG_DURATION);
            end
            
            % Prime recognition.
            if include_prime
                times(8) = showRecog(trials(1,:), p);
                if is_reach
                    prime_ans = getReachAns('recog', p);
                else
                    prime_ans = getKeyboardAns('recog', times(8), p);
                end
            else
                times(4) = times(5);
                prime_ans = default_prime_ans;
            end
            
            % PAS
            if include_prime
                times(9) = showTexture(p.PAS_SCREEN, p);
                [pas, pas_time] = getInput('pas', p);
            else
                
                times(9) = target_ans.categor_time;
                times(8) = times(9);
                pas = 1;
                pas_time = times(9);
                pause(0.7);
            end
            
            % Assigns collected data to trials.
            trials = assignToTrials(trials, times, target_ans, prime_ans, pas, pas_time);
            
            % Save trial to file and removes it from list.
            saveToFile(trials(1,:), is_reach, p);
            trials(1,:) = [];
            
            % Close mask textures.
            Screen('close',[mask1 mask2 mask3]);

            % Pause until sub is ready (in training only).
            if trials.practice{1} > 0
                showTexture(p.PRESS_SPACE_TO_CONTINUE, p);
                getInput('instruction', p);
            end
        end
    catch e % if error occured, saves data before exit.
        fixOutput(p);
        rethrow(e);
    end
end