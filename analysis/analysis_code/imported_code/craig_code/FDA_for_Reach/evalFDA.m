function data = evalFDA(FD, newSR, landmarks, tRange, deriv, giveEndSample, chunkSize)
% function data = evalFDA(FD, newSR, landmarks, tRange, deriv, giveEndSample, chunkSize)
%
%  Evaluates the FD object (generated by smoothFDA) at a specified sampling
%  rate.  If landmarks are given, evalFDA will register the data by event
%  region, sampling newSR times per event; otherwise, newSR will be used as
%  a real-time sampling rate (newSR samples per second).
%
%  If a time range is not specified in tRange, the entire range of the FD
%  object will be used.
%
% INPUT
% FD            ... the functional data object to be evaluated
% newSR         ... sampling rate of time series data
% landmarks     ... time values to which the data should be co-registered
%                   (see landmark registration at
%                    http://ego.psych.mcgill.ca/misc/fda/)
% tRange        ... time range in seconds of the excerpt to be evaluated.
%                   If left empty or unspecified, full range of FD is taken
% deriv         ... Derivative to be extracted (1...POS, 2...VEL, 3...ACC)
%                   If left empty or unspecified, [1 2 3] are default
% giveEndSample ... [boolean, default TRUE] Returns a sample on the last
%                   event or not.
%
% OUTPUT
% data          ... data structure with fields 'POS','VEL','ACC','TIME'
%               ... if landmark registration is used, will also contain a
%                   field 'Fs' specifying each event's sampling frequency.
%
% -Erik Koopmans June 5, 2008

%---CHECK INPUTS---
if nargin < 1   %FD
    error('FD input required.');
end
if nargin < 2   %newSR
    newSR = 1000;
end
if nargin < 3   %landmarks
    landmarks = [];
end
if nargin < 4   %tRange
    tRange = getbasisrange( getbasis(FD) );
elseif isempty(tRange)
    tRange = getbasisrange( getbasis(FD) );
end
if nargin < 5   %deriv
    deriv = 1:3;
end
if nargin < 6   %giveEndSample
    giveEndSample = true;
end
if nargin < 7
    chunkSize = 2000; % samples at a time
end
%--------------------------------------------------------------------------

startTime = now;

if isempty(landmarks) %---SAMPLE DATA WITHOUT REGISTRATION ---

    %Generate new sample period
    sPer = 1 / newSR;

    %Fit tRange to the sampling range, and generate sample times in seconds
    newtRange(1) = ceil( tRange(1) * newSR ) / newSR;
    newtRange(2) = floor( tRange(2) * newSR ) / newSR;
    samples = ( newtRange(1) : sPer : newtRange(end) );

    %Eliminate any point on the tail end of the time range
    if ~giveEndSample
        samples( samples == newtRange(2) ) = [];
    end

    %Evaluate the given derivatives of FD, and save results in data
    data = evalFDA_chunks(FD, samples, chunkSize, deriv);


else %---SAMPLE WITH REGISTRATION BY EVENT---

    %Limit the scope of landmarks to the given time range, and find IOI's
    landmarks( landmarks<tRange(1) | landmarks>tRange(2) ) = [];
    ioi = diff(landmarks);
    data = [];

    for i = 1:length(ioi)
        %Generate new sample period and sample times, in seconds
        if length( newSR ) > 1
            %ccEdit so that the input #samples in an event region matches
            %output (was 1 extra)
            sPer = ioi(i) / newSR(i);
        else
            %ccEdit so that the input #samples in an event region matches
            %output (was 1 extra)
            sPer = ioi(i) / newSR;
        end
        samples = landmarks(i) : sPer : landmarks(i+1);

        %Append the point on the tail end of the time range
        if ~( i == length(ioi) && giveEndSample )
            samples(end) = [];
        end

        %Evaluate the given derivatives of FD, and save results in data
        d = evalFDA_chunks(FD, samples, chunkSize, deriv);
        d.Fs = 1 / sPer;
        %ccEdit change order to allow d to define fieldnames etc
        data = structcat(data,d);
    end

end

%fprintf('%7.3f;\n',(now-startTime)*24*60*60);
%fprintf('evalFDA:\tcalc time %s\n',datestr(now-startTime,13));
% for i = [1 5:5:1200]; fprintf('%3d\t',i); data = evalFDA(FD,1000,[],[],1:3,true,i); end
end %End of evalFDA


function data = evalFDA_chunks(FD, samples, chunkSize, deriv)
% Evaluates the FD object by breaking it into chunks

%Set up data structure
dNames = {'POS' 'VEL' 'ACC'};
for j = deriv
    data.(dNames{j}) = [];
end
data.TIME = [];

%Set up start index of each chunk
chunks = 1 : chunkSize : length(samples);
chunks(end+1) = length(samples) + 1;

%Loop for each chunk
for i = 1 : length(chunks)-1
    %Generate a sample subset for this chunk
    samp = samples( chunks(i) : chunks(i+1)-1 );

    %Evaluate the FD object for each derivative, store in data
    for j = deriv
        array = eval_fd( samp, FD, int2Lfd(j-1) );
        data.(dNames{j})( end + (1:length(array)) ) = array;
    end
    data.TIME( end + (1:length(samp)) ) = samp;

end

end %End of evalFDA_chunks